{
  tokens = [
    SEMICOLON=";"
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    COMMA=","

    OP_ASSIGN="="

    OP_B_EQ="=="
    OP_B_NEQ="!="
    OP_B_OR="||"
    OP_B_AND="&&"
    OP_B_NOT="!"

    OP_ADD="+"
    OP_SUB="-"
    OP_MULT="*"
    OP_DIV="/"
    OP_REM="%"
    OP_GRT="<"

    OP_REF="ref"
    OP_CLONE="clone"

    OP_PRINT="print"


    TYPE_INT="int"
    TYPE_FLOAT="float"
    TYPE_STRING="str"
    TYPE_BOOL="bool"
    TYPE_GRAPH="graph"
    TYPE_RELATIONSHIP="rel"

    KEYWORD_TRUE="true"
    KEYWORD_FALSE="false"


    number='regexp:\d+'
    space='regexp:\s+'
    id="regexp:\w+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"

    line_comment="regexp://.*"
    block_comment="regexp:/\*(.|\n)*\*/"
    epsilon=""

    OP_REL_LEFT="|-"
    OP_REL_RIGHT="->"


  ]
}

 Start        ::= Statement*
  Statement    ::= VarDeclorGraphDeclorFuncDef | VarAssignOrGraphManip | PrintStatement | IfBlock | WhileBlock | FuncCall;
  VarDeclorGraphDeclorFuncDef ::= Type id(TailVarDecl | TailFuncDef ) | TYPE_GRAPH id (TailGraphManip |TailFuncDef)
  PrintStatement ::= OP_PRINT (id | string) SEMICOLON
  TailVarDecl      ::= TailVarAssign | SEMICOLON
  TailFuncDef ::= LEFT_PAREN [ListArgs] RIGHT_PAREN LEFT_BRACE Statement* ReturnStatement RIGHT_BRACE
  ListArgs ::= Arg TailListArg
  Arg ::= Type id
  TailListArg ::= (COMMA Arg)*
  ReturnStatement ::= OP_RETURN AssignVal SEMICOLON
  Type         ::= TYPE_STRING | TYPE_FLOAT | TYPE_BOOL | TYPE_INT | TYPE_GRAPH
  VarAssignOrGraphManip ::= id (TailVarAssign | TailGraphManip)
  TailVarAssign  ::= OP_ASSIGN AssignVal SEMICOLON
  AssignVal ::= Exp | number | string | id | FuncCall | KEYWORD_FMAP id id
  TailGraphManip   ::= LEFT_BRACE ListGraphOp RIGHT_BRACE
  ListGraphOp  ::= GraphOp*
  GraphOp      ::= AddRel | AddClone | AddRef | Type id TailVarDecl
  AddRef       ::= OP_REF id SEMICOLON
  AddClone     ::= OP_CLONE id SEMICOLON
  AddRel       ::= id OP_REL_LEFT string COMMA number OP_REL_RIGHT id SEMICOLON
  IfBlock ::= KEYWORD_IF LEFT_PAREN BoolExpr RIGHT_PAREN LEFT_BRACE Statement* RIGHT_BRACE [KEYWORD_ELSE LEFT_BRACE Statement* RIGHT_BRACE ]
  BoolExpr ::= KEYWORD_TRUE|KEYWORD_FALSE|Comp|FuncCall|id
  Comp ::= AssignVal CompOp AssignVal
  CompOp ::= OP_B_AND | OP_B_EQ | OP_B_OR | OP_B_NEQ | OP_GRT
  FuncCall ::= id LEFT_PAREN [ListArgs] RIGHT_PAREN
  WhileBlock ::= KEYWORD_WHILE LEFT_PAREN BoolExpr RIGHT_PAREN LEFT_BRACE Statement* RIGHT_BRACE