//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/balazsagardi/Non-Sync Docs/repos/LatticeCSharp/Lattice/Lattice.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LatticeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, SINGLELINE_COMMENT=2, MULTILINE_COMMENT=3, PYTHON=4, SNEK=5, 
		STRING=6, FLOAT_LIT=7, INTEGER=8, NATURAL_NUMBER=9, SEMICOLON=10, LEFT_BRACE=11, 
		RIGHT_BRACE=12, LEFT_PAREN=13, RIGHT_PAREN=14, COMMA=15, OP_ASSIGN=16, 
		OP_B_EQ=17, OP_B_NEQ=18, OP_B_OR=19, OP_B_AND=20, OP_B_NOT=21, OP_ADD=22, 
		OP_SUB=23, OP_MULT=24, OP_DIV=25, OP_REM=26, OP_GRT=27, OP_REF=28, OP_CLONE=29, 
		OP_RETURN=30, OP_PRINT=31, KEYWORD_DEF=32, TYPE_INT=33, TYPE_FLOAT=34, 
		TYPE_STRING=35, TYPE_BOOL=36, TYPE_GRAPH=37, TYPE_RELATIONSHIP=38, KEYWORD_FMAP=39, 
		KEYWORD_AS=40, KEYWORD_IF=41, KEYWORD_ELSE=42, KEYWORD_WHILE=43, KEYWORD_TRUE=44, 
		KEYWORD_FALSE=45, OP_REL_LEFT=46, OP_REL_RIGHT=47, ID=48;
	public const int
		RULE_start = 0, RULE_statement = 1, RULE_funcstatement = 2, RULE_funcdef = 3, 
		RULE_funcdefheader = 4, RULE_returnstatement = 5, RULE_listargs = 6, RULE_arg = 7, 
		RULE_taillistarg = 8, RULE_printstatement = 9, RULE_fmapstatement = 10, 
		RULE_vardecl = 11, RULE_vardecltail = 12, RULE_type = 13, RULE_varassignorgraphmaniporaddrel = 14, 
		RULE_tailvarassignorgraphmanip = 15, RULE_tailvarassign = 16, RULE_assignval = 17, 
		RULE_boolval = 18, RULE_tailgraphmanip = 19, RULE_addref = 20, RULE_addclone = 21, 
		RULE_tailaddrel = 22, RULE_outmostexpr = 23, RULE_expr = 24, RULE_number = 25, 
		RULE_addop = 26, RULE_mulop = 27, RULE_ifblock = 28, RULE_ifheader = 29, 
		RULE_elseblock = 30, RULE_outmostboolexpr = 31, RULE_boolexpr = 32, RULE_boolop = 33, 
		RULE_compop = 34, RULE_funccall = 35, RULE_whileblock = 36, RULE_whileblockheader = 37, 
		RULE_listparams = 38, RULE_param = 39, RULE_taillistparams = 40;
	public static readonly string[] ruleNames = {
		"start", "statement", "funcstatement", "funcdef", "funcdefheader", "returnstatement", 
		"listargs", "arg", "taillistarg", "printstatement", "fmapstatement", "vardecl", 
		"vardecltail", "type", "varassignorgraphmaniporaddrel", "tailvarassignorgraphmanip", 
		"tailvarassign", "assignval", "boolval", "tailgraphmanip", "addref", "addclone", 
		"tailaddrel", "outmostexpr", "expr", "number", "addop", "mulop", "ifblock", 
		"ifheader", "elseblock", "outmostboolexpr", "boolexpr", "boolop", "compop", 
		"funccall", "whileblock", "whileblockheader", "listparams", "param", "taillistparams"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "';'", "'{'", 
		"'}'", "'('", "')'", "','", "'='", "'=='", "'!='", "'||'", "'&&'", "'!'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'ref'", "'clone'", "'return'", 
		"'print'", "'def'", "'int'", "'float'", "'str'", "'bool'", "'graph'", 
		"'rel'", "'fmap'", "'as'", "'if'", "'else'", "'while'", "'true'", "'false'", 
		"'|-'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "SINGLELINE_COMMENT", "MULTILINE_COMMENT", "PYTHON", 
		"SNEK", "STRING", "FLOAT_LIT", "INTEGER", "NATURAL_NUMBER", "SEMICOLON", 
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "OP_ASSIGN", 
		"OP_B_EQ", "OP_B_NEQ", "OP_B_OR", "OP_B_AND", "OP_B_NOT", "OP_ADD", "OP_SUB", 
		"OP_MULT", "OP_DIV", "OP_REM", "OP_GRT", "OP_REF", "OP_CLONE", "OP_RETURN", 
		"OP_PRINT", "KEYWORD_DEF", "TYPE_INT", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BOOL", 
		"TYPE_GRAPH", "TYPE_RELATIONSHIP", "KEYWORD_FMAP", "KEYWORD_AS", "KEYWORD_IF", 
		"KEYWORD_ELSE", "KEYWORD_WHILE", "KEYWORD_TRUE", "KEYWORD_FALSE", "OP_REL_LEFT", 
		"OP_REL_RIGHT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lattice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LatticeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LatticeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LatticeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext[] funcdef() {
			return GetRuleContexts<FuncdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef(int i) {
			return GetRuleContext<FuncdefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293293384531968L) != 0)) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP_REF:
				case OP_CLONE:
				case OP_PRINT:
				case TYPE_INT:
				case TYPE_FLOAT:
				case TYPE_STRING:
				case TYPE_BOOL:
				case TYPE_GRAPH:
				case KEYWORD_FMAP:
				case KEYWORD_IF:
				case KEYWORD_WHILE:
				case ID:
					{
					State = 82;
					statement();
					}
					break;
				case KEYWORD_DEF:
					{
					State = 83;
					funcdef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarassignorgraphmaniporaddrelContext varassignorgraphmaniporaddrel() {
			return GetRuleContext<VarassignorgraphmaniporaddrelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfblockContext ifblock() {
			return GetRuleContext<IfblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileblockContext whileblock() {
			return GetRuleContext<WhileblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AddcloneContext addclone() {
			return GetRuleContext<AddcloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FmapstatementContext fmapstatement() {
			return GetRuleContext<FmapstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddrefContext addref() {
			return GetRuleContext<AddrefContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				vardecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				varassignorgraphmaniporaddrel();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				printstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				ifblock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 93;
				whileblock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 94;
				funccall();
				State = 95;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97;
				addclone();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				fmapstatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99;
				addref();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		public FuncstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFuncstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFuncstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncstatementContext funcstatement() {
		FuncstatementContext _localctx = new FuncstatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcstatement);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_REF:
			case OP_CLONE:
			case OP_PRINT:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_STRING:
			case TYPE_BOOL:
			case TYPE_GRAPH:
			case KEYWORD_FMAP:
			case KEYWORD_IF:
			case KEYWORD_WHILE:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				statement();
				}
				break;
			case OP_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				returnstatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefheaderContext funcdefheader() {
			return GetRuleContext<FuncdefheaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncstatementContext[] funcstatement() {
			return GetRuleContexts<FuncstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncstatementContext funcstatement(int i) {
			return GetRuleContext<FuncstatementContext>(i);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			funcdefheader();
			State = 107;
			Match(LEFT_BRACE);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293290163306496L) != 0)) {
				{
				{
				State = 108;
				funcstatement();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DEF() { return GetToken(LatticeParser.KEYWORD_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListargsContext listargs() {
			return GetRuleContext<ListargsContext>(0);
		}
		public FuncdefheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdefheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFuncdefheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFuncdefheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdefheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefheaderContext funcdefheader() {
		FuncdefheaderContext _localctx = new FuncdefheaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcdefheader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(KEYWORD_DEF);
			State = 117;
			type();
			State = 118;
			Match(ID);
			State = 119;
			Match(LEFT_PAREN);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 266287972352L) != 0)) {
				{
				State = 120;
				listargs();
				}
			}

			State = 123;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RETURN() { return GetToken(LatticeParser.OP_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutmostexprContext outmostexpr() {
			return GetRuleContext<OutmostexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(OP_RETURN);
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 126;
				outmostexpr();
				}
				break;
			case 2:
				{
				State = 127;
				outmostboolexpr();
				}
				break;
			}
			State = 130;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaillistargContext taillistarg() {
			return GetRuleContext<TaillistargContext>(0);
		}
		public ListargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterListargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitListargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListargsContext listargs() {
		ListargsContext _localctx = new ListargsContext(Context, State);
		EnterRule(_localctx, 12, RULE_listargs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			arg();
			State = 133;
			taillistarg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 14, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			type();
			State = 136;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaillistargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LatticeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LatticeParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public TaillistargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taillistarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTaillistarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTaillistarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaillistarg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaillistargContext taillistarg() {
		TaillistargContext _localctx = new TaillistargContext(Context, State);
		EnterRule(_localctx, 16, RULE_taillistarg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 138;
				Match(COMMA);
				State = 139;
				arg();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PRINT() { return GetToken(LatticeParser.OP_PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_printstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(OP_PRINT);
			State = 146;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 147;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FmapstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FMAP() { return GetToken(LatticeParser.KEYWORD_FMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LatticeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LatticeParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public FmapstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fmapstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFmapstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFmapstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFmapstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FmapstatementContext fmapstatement() {
		FmapstatementContext _localctx = new FmapstatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_fmapstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(KEYWORD_FMAP);
			State = 150;
			Match(ID);
			State = 151;
			Match(ID);
			State = 152;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardecltailContext vardecltail() {
			return GetRuleContext<VardecltailContext>(0);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_vardecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			type();
			State = 155;
			Match(ID);
			State = 156;
			vardecltail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecltailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
			return GetRuleContext<TailvarassignorgraphmanipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public VardecltailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecltail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVardecltail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVardecltail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecltail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecltailContext vardecltail() {
		VardecltailContext _localctx = new VardecltailContext(Context, State);
		EnterRule(_localctx, 24, RULE_vardecltail);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
			case OP_ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				tailvarassignorgraphmanip();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(LatticeParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(LatticeParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(LatticeParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(LatticeParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_GRAPH() { return GetToken(LatticeParser.TYPE_GRAPH, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 266287972352L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarassignorgraphmaniporaddrelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
			return GetRuleContext<TailvarassignorgraphmanipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TailaddrelContext tailaddrel() {
			return GetRuleContext<TailaddrelContext>(0);
		}
		public VarassignorgraphmaniporaddrelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varassignorgraphmaniporaddrel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVarassignorgraphmaniporaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVarassignorgraphmaniporaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarassignorgraphmaniporaddrel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarassignorgraphmaniporaddrelContext varassignorgraphmaniporaddrel() {
		VarassignorgraphmaniporaddrelContext _localctx = new VarassignorgraphmaniporaddrelContext(Context, State);
		EnterRule(_localctx, 28, RULE_varassignorgraphmaniporaddrel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(ID);
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
			case OP_ASSIGN:
				{
				State = 165;
				tailvarassignorgraphmanip();
				}
				break;
			case OP_REL_LEFT:
				{
				State = 166;
				tailaddrel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailvarassignorgraphmanipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignContext tailvarassign() {
			return GetRuleContext<TailvarassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TailgraphmanipContext tailgraphmanip() {
			return GetRuleContext<TailgraphmanipContext>(0);
		}
		public TailvarassignorgraphmanipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailvarassignorgraphmanip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailvarassignorgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailvarassignorgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailvarassignorgraphmanip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
		TailvarassignorgraphmanipContext _localctx = new TailvarassignorgraphmanipContext(Context, State);
		EnterRule(_localctx, 30, RULE_tailvarassignorgraphmanip);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				tailvarassign();
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				tailgraphmanip();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailvarassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(LatticeParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignvalContext assignval() {
			return GetRuleContext<AssignvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public TailvarassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailvarassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailvarassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailvarassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailvarassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailvarassignContext tailvarassign() {
		TailvarassignContext _localctx = new TailvarassignContext(Context, State);
		EnterRule(_localctx, 32, RULE_tailvarassign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(OP_ASSIGN);
			State = 174;
			assignval();
			State = 175;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutmostexprContext outmostexpr() {
			return GetRuleContext<OutmostexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		public AssignvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAssignval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAssignval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignvalContext assignval() {
		AssignvalContext _localctx = new AssignvalContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignval);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				outmostexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				outmostboolexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRUE() { return GetToken(LatticeParser.KEYWORD_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FALSE() { return GetToken(LatticeParser.KEYWORD_FALSE, 0); }
		public BoolvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBoolval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBoolval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolvalContext boolval() {
		BoolvalContext _localctx = new BoolvalContext(Context, State);
		EnterRule(_localctx, 36, RULE_boolval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_TRUE || _la==KEYWORD_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailgraphmanipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TailgraphmanipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailgraphmanip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailgraphmanip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailgraphmanipContext tailgraphmanip() {
		TailgraphmanipContext _localctx = new TailgraphmanipContext(Context, State);
		EnterRule(_localctx, 38, RULE_tailgraphmanip);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LEFT_BRACE);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293289089564672L) != 0)) {
				{
				{
				State = 184;
				statement();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(LatticeParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public AddrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddrefContext addref() {
		AddrefContext _localctx = new AddrefContext(Context, State);
		EnterRule(_localctx, 40, RULE_addref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(OP_REF);
			State = 193;
			Match(ID);
			State = 194;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddcloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CLONE() { return GetToken(LatticeParser.OP_CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LatticeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LatticeParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(LatticeParser.KEYWORD_AS, 0); }
		public AddcloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addclone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddclone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddclone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddclone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddcloneContext addclone() {
		AddcloneContext _localctx = new AddcloneContext(Context, State);
		EnterRule(_localctx, 42, RULE_addclone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(OP_CLONE);
			State = 197;
			Match(ID);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_AS) {
				{
				State = 198;
				Match(KEYWORD_AS);
				State = 199;
				Match(ID);
				}
			}

			State = 202;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailaddrelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REL_LEFT() { return GetToken(LatticeParser.OP_REL_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LatticeParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REL_RIGHT() { return GetToken(LatticeParser.OP_REL_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public TailaddrelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailaddrel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailaddrel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailaddrelContext tailaddrel() {
		TailaddrelContext _localctx = new TailaddrelContext(Context, State);
		EnterRule(_localctx, 44, RULE_tailaddrel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(OP_REL_LEFT);
			State = 205;
			number();
			State = 206;
			Match(COMMA);
			State = 207;
			Match(STRING);
			State = 208;
			Match(OP_REL_RIGHT);
			State = 209;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutmostexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutmostexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outmostexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterOutmostexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitOutmostexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutmostexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutmostexprContext outmostexpr() {
		OutmostexprContext _localctx = new OutmostexprContext(Context, State);
		EnterRule(_localctx, 46, RULE_outmostexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UMINUSContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(LatticeParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UMINUSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterUMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitUMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDCASEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public IDCASEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIDCASE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIDCASE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDCASE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGEXPRContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		public STRINGEXPRContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterSTRINGEXPR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitSTRINGEXPR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRINGEXPR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FUNCTIONCALLContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public FUNCTIONCALLContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFUNCTIONCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFUNCTIONCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFUNCTIONCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARENGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public PARENGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPARENGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPARENGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARENGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DOUBLEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DOUBLEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterDOUBLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitDOUBLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDOUBLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULOPGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop() {
			return GetRuleContext<MulopContext>(0);
		}
		public MULOPGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterMULOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitMULOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULOPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDOPGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop() {
			return GetRuleContext<AddopContext>(0);
		}
		public ADDOPGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterADDOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitADDOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADDOPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new UMINUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 214;
				Match(OP_SUB);
				State = 215;
				expr(8);
				}
				break;
			case 2:
				{
				_localctx = new PARENGRPContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				Match(LEFT_PAREN);
				State = 217;
				expr(0);
				State = 218;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new DOUBLEContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				number();
				}
				break;
			case 4:
				{
				_localctx = new IDCASEContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				Match(ID);
				}
				break;
			case 5:
				{
				_localctx = new FUNCTIONCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				funccall();
				}
				break;
			case 6:
				{
				_localctx = new STRINGEXPRContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 236;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 234;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new MULOPGRPContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 226;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 227;
						mulop();
						State = 228;
						expr(8);
						}
						break;
					case 2:
						{
						_localctx = new ADDOPGRPContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 230;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 231;
						addop();
						State = 232;
						expr(7);
						}
						break;
					}
					} 
				}
				State = 238;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LatticeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(LatticeParser.FLOAT_LIT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 50, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LIT || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(LatticeParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(LatticeParser.OP_SUB, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 52, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT() { return GetToken(LatticeParser.OP_MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(LatticeParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REM() { return GetToken(LatticeParser.OP_REM, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 54, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfheaderContext ifheader() {
			return GetRuleContext<IfheaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseblockContext elseblock() {
			return GetRuleContext<ElseblockContext>(0);
		}
		public IfblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIfblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIfblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfblockContext ifblock() {
		IfblockContext _localctx = new IfblockContext(Context, State);
		EnterRule(_localctx, 56, RULE_ifblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ifheader();
			State = 246;
			Match(LEFT_BRACE);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293289089564672L) != 0)) {
				{
				{
				State = 247;
				statement();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(RIGHT_BRACE);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 254;
				elseblock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(LatticeParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public IfheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIfheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIfheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfheaderContext ifheader() {
		IfheaderContext _localctx = new IfheaderContext(Context, State);
		EnterRule(_localctx, 58, RULE_ifheader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(KEYWORD_IF);
			State = 258;
			Match(LEFT_PAREN);
			State = 259;
			outmostboolexpr();
			State = 260;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(LatticeParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterElseblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitElseblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseblockContext elseblock() {
		ElseblockContext _localctx = new ElseblockContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(KEYWORD_ELSE);
			State = 263;
			Match(LEFT_BRACE);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293289089564672L) != 0)) {
				{
				{
				State = 264;
				statement();
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutmostboolexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public OutmostboolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outmostboolexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterOutmostboolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitOutmostboolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutmostboolexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutmostboolexprContext outmostboolexpr() {
		OutmostboolexprContext _localctx = new OutmostboolexprContext(Context, State);
		EnterRule(_localctx, 62, RULE_outmostboolexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			boolexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexprContext : ParserRuleContext {
		public BoolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpr; } }
	 
		public BoolexprContext() { }
		public virtual void CopyFrom(BoolexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BOOLVALContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BOOLVALContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLVAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLVAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLVAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOOLEXPRCOMPGRPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext[] boolexpr() {
			return GetRuleContexts<BoolexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr(int i) {
			return GetRuleContext<BoolexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompopContext compop() {
			return GetRuleContext<CompopContext>(0);
		}
		public BOOLEXPRCOMPGRPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLEXPRCOMPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOTContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_NOT() { return GetToken(LatticeParser.OP_B_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public NOTContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterNOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitNOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARENGRPBOOLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public PARENGRPBOOLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPARENGRPBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPARENGRPBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARENGRPBOOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOOLOPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext[] boolexpr() {
			return GetRuleContexts<BoolexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr(int i) {
			return GetRuleContext<BoolexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolopContext boolop() {
			return GetRuleContext<BoolopContext>(0);
		}
		public BOOLOPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLOP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EXPRCOMPGRPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompopContext compop() {
			return GetRuleContext<CompopContext>(0);
		}
		public EXPRCOMPGRPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEXPRCOMPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDBOOLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public IDBOOLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIDBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIDBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDBOOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FUNCCALLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public FUNCCALLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFUNCCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFUNCCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFUNCCALL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexprContext boolexpr() {
		return boolexpr(0);
	}

	private BoolexprContext boolexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolexprContext _localctx = new BoolexprContext(Context, _parentState);
		BoolexprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_boolexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new NOTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 275;
				Match(OP_B_NOT);
				State = 276;
				boolexpr(8);
				}
				break;
			case 2:
				{
				_localctx = new EXPRCOMPGRPContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 277;
				expr(0);
				State = 278;
				compop();
				State = 279;
				expr(0);
				}
				break;
			case 3:
				{
				_localctx = new PARENGRPBOOLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(LEFT_PAREN);
				State = 282;
				boolexpr(0);
				State = 283;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new IDBOOLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285;
				Match(ID);
				}
				break;
			case 5:
				{
				_localctx = new FUNCCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				funccall();
				}
				break;
			case 6:
				{
				_localctx = new BOOLVALContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 287;
				boolval();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 298;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new BOOLOPContext(new BoolexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
						State = 290;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 291;
						boolop();
						State = 292;
						boolexpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BOOLEXPRCOMPGRPContext(new BoolexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
						State = 294;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 295;
						compop();
						State = 296;
						boolexpr(7);
						}
						break;
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_AND() { return GetToken(LatticeParser.OP_B_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(LatticeParser.OP_B_OR, 0); }
		public BoolopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBoolop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBoolop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolopContext boolop() {
		BoolopContext _localctx = new BoolopContext(Context, State);
		EnterRule(_localctx, 66, RULE_boolop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_B_OR || _la==OP_B_AND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_EQ() { return GetToken(LatticeParser.OP_B_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_NEQ() { return GetToken(LatticeParser.OP_B_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(LatticeParser.OP_GRT, 0); }
		public CompopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterCompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitCompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompopContext compop() {
		CompopContext _localctx = new CompopContext(Context, State);
		EnterRule(_localctx, 68, RULE_compop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134610944L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListparamsContext listparams() {
			return GetRuleContext<ListparamsContext>(0);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 70, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(ID);
			State = 308;
			Match(LEFT_PAREN);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 334251545338304L) != 0)) {
				{
				State = 309;
				listparams();
				}
			}

			State = 312;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileblockheaderContext whileblockheader() {
			return GetRuleContext<WhileblockheaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterWhileblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitWhileblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileblockContext whileblock() {
		WhileblockContext _localctx = new WhileblockContext(Context, State);
		EnterRule(_localctx, 72, RULE_whileblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			whileblockheader();
			State = 315;
			Match(LEFT_BRACE);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 293289089564672L) != 0)) {
				{
				{
				State = 316;
				statement();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 322;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileblockheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(LatticeParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public WhileblockheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileblockheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterWhileblockheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitWhileblockheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileblockheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileblockheaderContext whileblockheader() {
		WhileblockheaderContext _localctx = new WhileblockheaderContext(Context, State);
		EnterRule(_localctx, 74, RULE_whileblockheader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(KEYWORD_WHILE);
			State = 325;
			Match(LEFT_PAREN);
			State = 326;
			outmostboolexpr();
			State = 327;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListparamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaillistparamsContext taillistparams() {
			return GetRuleContext<TaillistparamsContext>(0);
		}
		public ListparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listparams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterListparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitListparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListparamsContext listparams() {
		ListparamsContext _localctx = new ListparamsContext(Context, State);
		EnterRule(_localctx, 76, RULE_listparams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			param();
			State = 330;
			taillistparams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutmostexprContext outmostexpr() {
			return GetRuleContext<OutmostexprContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 78, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 332;
				outmostboolexpr();
				}
				break;
			case 2:
				{
				State = 333;
				outmostexpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaillistparamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LatticeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LatticeParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public TaillistparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taillistparams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTaillistparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTaillistparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaillistparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaillistparamsContext taillistparams() {
		TaillistparamsContext _localctx = new TaillistparamsContext(Context, State);
		EnterRule(_localctx, 80, RULE_taillistparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 336;
				Match(COMMA);
				State = 337;
				param();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expr_sempred((ExprContext)_localctx, predIndex);
		case 32: return boolexpr_sempred((BoolexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool boolexpr_sempred(BoolexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,344,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,5,0,85,8,0,10,
		0,12,0,88,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,101,8,1,
		1,2,1,2,3,2,105,8,2,1,3,1,3,1,3,5,3,110,8,3,10,3,12,3,113,9,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,3,4,122,8,4,1,4,1,4,1,5,1,5,1,5,3,5,129,8,5,1,5,1,
		5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,5,8,141,8,8,10,8,12,8,144,9,8,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,3,12,
		161,8,12,1,13,1,13,1,14,1,14,1,14,3,14,168,8,14,1,15,1,15,3,15,172,8,15,
		1,16,1,16,1,16,1,16,1,17,1,17,3,17,180,8,17,1,18,1,18,1,19,1,19,5,19,186,
		8,19,10,19,12,19,189,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,3,21,201,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
		23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,225,8,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,235,8,24,10,24,12,24,238,
		9,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,5,28,249,8,28,10,28,
		12,28,252,9,28,1,28,1,28,3,28,256,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
		30,1,30,5,30,266,8,30,10,30,12,30,269,9,30,1,30,1,30,1,31,1,31,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,289,
		8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,299,8,32,10,32,12,32,
		302,9,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,3,35,311,8,35,1,35,1,35,1,
		36,1,36,1,36,5,36,318,8,36,10,36,12,36,321,9,36,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,3,39,335,8,39,1,40,1,40,5,40,339,
		8,40,10,40,12,40,342,9,40,1,40,0,2,48,64,41,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,0,8,2,0,6,6,48,48,1,0,33,37,1,0,44,45,1,0,7,8,1,0,22,
		23,1,0,24,26,1,0,19,20,2,0,17,18,27,27,344,0,86,1,0,0,0,2,100,1,0,0,0,
		4,104,1,0,0,0,6,106,1,0,0,0,8,116,1,0,0,0,10,125,1,0,0,0,12,132,1,0,0,
		0,14,135,1,0,0,0,16,142,1,0,0,0,18,145,1,0,0,0,20,149,1,0,0,0,22,154,1,
		0,0,0,24,160,1,0,0,0,26,162,1,0,0,0,28,164,1,0,0,0,30,171,1,0,0,0,32,173,
		1,0,0,0,34,179,1,0,0,0,36,181,1,0,0,0,38,183,1,0,0,0,40,192,1,0,0,0,42,
		196,1,0,0,0,44,204,1,0,0,0,46,211,1,0,0,0,48,224,1,0,0,0,50,239,1,0,0,
		0,52,241,1,0,0,0,54,243,1,0,0,0,56,245,1,0,0,0,58,257,1,0,0,0,60,262,1,
		0,0,0,62,272,1,0,0,0,64,288,1,0,0,0,66,303,1,0,0,0,68,305,1,0,0,0,70,307,
		1,0,0,0,72,314,1,0,0,0,74,324,1,0,0,0,76,329,1,0,0,0,78,334,1,0,0,0,80,
		340,1,0,0,0,82,85,3,2,1,0,83,85,3,6,3,0,84,82,1,0,0,0,84,83,1,0,0,0,85,
		88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,1,1,0,0,0,88,86,1,0,0,0,89,101,
		3,22,11,0,90,101,3,28,14,0,91,101,3,18,9,0,92,101,3,56,28,0,93,101,3,72,
		36,0,94,95,3,70,35,0,95,96,5,10,0,0,96,101,1,0,0,0,97,101,3,42,21,0,98,
		101,3,20,10,0,99,101,3,40,20,0,100,89,1,0,0,0,100,90,1,0,0,0,100,91,1,
		0,0,0,100,92,1,0,0,0,100,93,1,0,0,0,100,94,1,0,0,0,100,97,1,0,0,0,100,
		98,1,0,0,0,100,99,1,0,0,0,101,3,1,0,0,0,102,105,3,2,1,0,103,105,3,10,5,
		0,104,102,1,0,0,0,104,103,1,0,0,0,105,5,1,0,0,0,106,107,3,8,4,0,107,111,
		5,11,0,0,108,110,3,4,2,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,
		0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,5,12,0,0,115,
		7,1,0,0,0,116,117,5,32,0,0,117,118,3,26,13,0,118,119,5,48,0,0,119,121,
		5,13,0,0,120,122,3,12,6,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,
		0,0,123,124,5,14,0,0,124,9,1,0,0,0,125,128,5,30,0,0,126,129,3,46,23,0,
		127,129,3,62,31,0,128,126,1,0,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,
		131,5,10,0,0,131,11,1,0,0,0,132,133,3,14,7,0,133,134,3,16,8,0,134,13,1,
		0,0,0,135,136,3,26,13,0,136,137,5,48,0,0,137,15,1,0,0,0,138,139,5,15,0,
		0,139,141,3,14,7,0,140,138,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,
		143,1,0,0,0,143,17,1,0,0,0,144,142,1,0,0,0,145,146,5,31,0,0,146,147,7,
		0,0,0,147,148,5,10,0,0,148,19,1,0,0,0,149,150,5,39,0,0,150,151,5,48,0,
		0,151,152,5,48,0,0,152,153,5,10,0,0,153,21,1,0,0,0,154,155,3,26,13,0,155,
		156,5,48,0,0,156,157,3,24,12,0,157,23,1,0,0,0,158,161,3,30,15,0,159,161,
		5,10,0,0,160,158,1,0,0,0,160,159,1,0,0,0,161,25,1,0,0,0,162,163,7,1,0,
		0,163,27,1,0,0,0,164,167,5,48,0,0,165,168,3,30,15,0,166,168,3,44,22,0,
		167,165,1,0,0,0,167,166,1,0,0,0,168,29,1,0,0,0,169,172,3,32,16,0,170,172,
		3,38,19,0,171,169,1,0,0,0,171,170,1,0,0,0,172,31,1,0,0,0,173,174,5,16,
		0,0,174,175,3,34,17,0,175,176,5,10,0,0,176,33,1,0,0,0,177,180,3,46,23,
		0,178,180,3,62,31,0,179,177,1,0,0,0,179,178,1,0,0,0,180,35,1,0,0,0,181,
		182,7,2,0,0,182,37,1,0,0,0,183,187,5,11,0,0,184,186,3,2,1,0,185,184,1,
		0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,
		189,187,1,0,0,0,190,191,5,12,0,0,191,39,1,0,0,0,192,193,5,28,0,0,193,194,
		5,48,0,0,194,195,5,10,0,0,195,41,1,0,0,0,196,197,5,29,0,0,197,200,5,48,
		0,0,198,199,5,40,0,0,199,201,5,48,0,0,200,198,1,0,0,0,200,201,1,0,0,0,
		201,202,1,0,0,0,202,203,5,10,0,0,203,43,1,0,0,0,204,205,5,46,0,0,205,206,
		3,50,25,0,206,207,5,15,0,0,207,208,5,6,0,0,208,209,5,47,0,0,209,210,5,
		48,0,0,210,45,1,0,0,0,211,212,3,48,24,0,212,47,1,0,0,0,213,214,6,24,-1,
		0,214,215,5,23,0,0,215,225,3,48,24,8,216,217,5,13,0,0,217,218,3,48,24,
		0,218,219,5,14,0,0,219,225,1,0,0,0,220,225,3,50,25,0,221,225,5,48,0,0,
		222,225,3,70,35,0,223,225,5,6,0,0,224,213,1,0,0,0,224,216,1,0,0,0,224,
		220,1,0,0,0,224,221,1,0,0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,236,1,
		0,0,0,226,227,10,7,0,0,227,228,3,54,27,0,228,229,3,48,24,8,229,235,1,0,
		0,0,230,231,10,6,0,0,231,232,3,52,26,0,232,233,3,48,24,7,233,235,1,0,0,
		0,234,226,1,0,0,0,234,230,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,
		237,1,0,0,0,237,49,1,0,0,0,238,236,1,0,0,0,239,240,7,3,0,0,240,51,1,0,
		0,0,241,242,7,4,0,0,242,53,1,0,0,0,243,244,7,5,0,0,244,55,1,0,0,0,245,
		246,3,58,29,0,246,250,5,11,0,0,247,249,3,2,1,0,248,247,1,0,0,0,249,252,
		1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,
		0,253,255,5,12,0,0,254,256,3,60,30,0,255,254,1,0,0,0,255,256,1,0,0,0,256,
		57,1,0,0,0,257,258,5,41,0,0,258,259,5,13,0,0,259,260,3,62,31,0,260,261,
		5,14,0,0,261,59,1,0,0,0,262,263,5,42,0,0,263,267,5,11,0,0,264,266,3,2,
		1,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,
		270,1,0,0,0,269,267,1,0,0,0,270,271,5,12,0,0,271,61,1,0,0,0,272,273,3,
		64,32,0,273,63,1,0,0,0,274,275,6,32,-1,0,275,276,5,21,0,0,276,289,3,64,
		32,8,277,278,3,48,24,0,278,279,3,68,34,0,279,280,3,48,24,0,280,289,1,0,
		0,0,281,282,5,13,0,0,282,283,3,64,32,0,283,284,5,14,0,0,284,289,1,0,0,
		0,285,289,5,48,0,0,286,289,3,70,35,0,287,289,3,36,18,0,288,274,1,0,0,0,
		288,277,1,0,0,0,288,281,1,0,0,0,288,285,1,0,0,0,288,286,1,0,0,0,288,287,
		1,0,0,0,289,300,1,0,0,0,290,291,10,7,0,0,291,292,3,66,33,0,292,293,3,64,
		32,8,293,299,1,0,0,0,294,295,10,6,0,0,295,296,3,68,34,0,296,297,3,64,32,
		7,297,299,1,0,0,0,298,290,1,0,0,0,298,294,1,0,0,0,299,302,1,0,0,0,300,
		298,1,0,0,0,300,301,1,0,0,0,301,65,1,0,0,0,302,300,1,0,0,0,303,304,7,6,
		0,0,304,67,1,0,0,0,305,306,7,7,0,0,306,69,1,0,0,0,307,308,5,48,0,0,308,
		310,5,13,0,0,309,311,3,76,38,0,310,309,1,0,0,0,310,311,1,0,0,0,311,312,
		1,0,0,0,312,313,5,14,0,0,313,71,1,0,0,0,314,315,3,74,37,0,315,319,5,11,
		0,0,316,318,3,2,1,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,
		320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,12,0,0,323,73,1,
		0,0,0,324,325,5,43,0,0,325,326,5,13,0,0,326,327,3,62,31,0,327,328,5,14,
		0,0,328,75,1,0,0,0,329,330,3,78,39,0,330,331,3,80,40,0,331,77,1,0,0,0,
		332,335,3,62,31,0,333,335,3,46,23,0,334,332,1,0,0,0,334,333,1,0,0,0,335,
		79,1,0,0,0,336,337,5,15,0,0,337,339,3,78,39,0,338,336,1,0,0,0,339,342,
		1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,81,1,0,0,0,342,340,1,0,0,0,
		27,84,86,100,104,111,121,128,142,160,167,171,179,187,200,224,234,236,250,
		255,267,288,298,300,310,319,334,340
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
