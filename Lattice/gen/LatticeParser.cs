//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/balazsagardi/Non-Sync Docs/repos/LatticeCSharp/Lattice/Lattice.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LatticeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, SINGLELINE_COMMENT=2, MULTILINE_COMMENT=3, PYTHON=4, SNEK=5, 
		STRING=6, FLOAT_LIT=7, INTEGER=8, NATURAL_NUMBER=9, SEMICOLON=10, LEFT_BRACE=11, 
		RIGHT_BRACE=12, LEFT_PAREN=13, RIGHT_PAREN=14, COMMA=15, OP_ASSIGN=16, 
		OP_B_EQ=17, OP_B_NEQ=18, OP_B_OR=19, OP_B_AND=20, OP_B_NOT=21, OP_ADD=22, 
		OP_SUB=23, OP_MULT=24, OP_DIV=25, OP_REM=26, OP_GRT=27, OP_REF=28, OP_CLONE=29, 
		OP_RETURN=30, OP_PRINT=31, KEYWORD_DEF=32, TYPE_INT=33, TYPE_FLOAT=34, 
		TYPE_STRING=35, TYPE_BOOL=36, TYPE_GRAPH=37, TYPE_RELATIONSHIP=38, KEYWORD_FMAP=39, 
		KEYWORD_IF=40, KEYWORD_ELSE=41, KEYWORD_WHILE=42, KEYWORD_TRUE=43, KEYWORD_FALSE=44, 
		OP_REL_LEFT=45, OP_REL_RIGHT=46, ID=47;
	public const int
		RULE_start = 0, RULE_statement = 1, RULE_funcdef = 2, RULE_returnstatement = 3, 
		RULE_listargs = 4, RULE_arg = 5, RULE_taillistarg = 6, RULE_printstatement = 7, 
		RULE_vardecl = 8, RULE_vardecltail = 9, RULE_type = 10, RULE_varassignorgraphmaniporaddrel = 11, 
		RULE_tailvarassignorgraphmanip = 12, RULE_tailvarassign = 13, RULE_assignval = 14, 
		RULE_boolval = 15, RULE_tailgraphmanip = 16, RULE_addref = 17, RULE_addclone = 18, 
		RULE_tailaddrel = 19, RULE_outmostexpr = 20, RULE_expr = 21, RULE_number = 22, 
		RULE_addop = 23, RULE_mulop = 24, RULE_ifblock = 25, RULE_ifheader = 26, 
		RULE_elseblock = 27, RULE_outmostboolexpr = 28, RULE_boolexpr = 29, RULE_boolop = 30, 
		RULE_compop = 31, RULE_funccall = 32, RULE_whileblock = 33, RULE_whileblockheader = 34, 
		RULE_listparams = 35, RULE_param = 36, RULE_taillistparams = 37;
	public static readonly string[] ruleNames = {
		"start", "statement", "funcdef", "returnstatement", "listargs", "arg", 
		"taillistarg", "printstatement", "vardecl", "vardecltail", "type", "varassignorgraphmaniporaddrel", 
		"tailvarassignorgraphmanip", "tailvarassign", "assignval", "boolval", 
		"tailgraphmanip", "addref", "addclone", "tailaddrel", "outmostexpr", "expr", 
		"number", "addop", "mulop", "ifblock", "ifheader", "elseblock", "outmostboolexpr", 
		"boolexpr", "boolop", "compop", "funccall", "whileblock", "whileblockheader", 
		"listparams", "param", "taillistparams"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "';'", "'{'", 
		"'}'", "'('", "')'", "','", "'='", "'=='", "'!='", "'||'", "'&&'", "'!'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'ref'", "'clone'", "'return'", 
		"'print'", "'def'", "'int'", "'float'", "'str'", "'bool'", "'graph'", 
		"'rel'", "'fmap'", "'if'", "'else'", "'while'", "'true'", "'false'", "'|-'", 
		"'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "SINGLELINE_COMMENT", "MULTILINE_COMMENT", "PYTHON", 
		"SNEK", "STRING", "FLOAT_LIT", "INTEGER", "NATURAL_NUMBER", "SEMICOLON", 
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "OP_ASSIGN", 
		"OP_B_EQ", "OP_B_NEQ", "OP_B_OR", "OP_B_AND", "OP_B_NOT", "OP_ADD", "OP_SUB", 
		"OP_MULT", "OP_DIV", "OP_REM", "OP_GRT", "OP_REF", "OP_CLONE", "OP_RETURN", 
		"OP_PRINT", "KEYWORD_DEF", "TYPE_INT", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BOOL", 
		"TYPE_GRAPH", "TYPE_RELATIONSHIP", "KEYWORD_FMAP", "KEYWORD_IF", "KEYWORD_ELSE", 
		"KEYWORD_WHILE", "KEYWORD_TRUE", "KEYWORD_FALSE", "OP_REL_LEFT", "OP_REL_RIGHT", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lattice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LatticeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LatticeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LatticeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext[] funcdef() {
			return GetRuleContexts<FuncdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef(int i) {
			return GetRuleContext<FuncdefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173447701340608L) != 0)) {
				{
				State = 78;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case FLOAT_LIT:
				case INTEGER:
				case LEFT_PAREN:
				case OP_B_NOT:
				case OP_SUB:
				case OP_REF:
				case OP_CLONE:
				case OP_RETURN:
				case OP_PRINT:
				case TYPE_INT:
				case TYPE_FLOAT:
				case TYPE_STRING:
				case TYPE_BOOL:
				case TYPE_GRAPH:
				case KEYWORD_FMAP:
				case KEYWORD_IF:
				case KEYWORD_WHILE:
				case KEYWORD_TRUE:
				case KEYWORD_FALSE:
				case ID:
					{
					State = 76;
					statement();
					}
					break;
				case KEYWORD_DEF:
					{
					State = 77;
					funcdef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarassignorgraphmaniporaddrelContext varassignorgraphmaniporaddrel() {
			return GetRuleContext<VarassignorgraphmaniporaddrelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfblockContext ifblock() {
			return GetRuleContext<IfblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileblockContext whileblock() {
			return GetRuleContext<WhileblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddcloneContext addclone() {
			return GetRuleContext<AddcloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddrefContext addref() {
			return GetRuleContext<AddrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutmostexprContext outmostexpr() {
			return GetRuleContext<OutmostexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				vardecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				varassignorgraphmaniporaddrel();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				printstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				ifblock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				whileblock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				funccall();
				State = 89;
				Match(SEMICOLON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 91;
				returnstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 92;
				addclone();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 93;
				addref();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 94;
				outmostexpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 95;
				boolexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DEF() { return GetToken(LatticeParser.KEYWORD_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListargsContext listargs() {
			return GetRuleContext<ListargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(KEYWORD_DEF);
			State = 99;
			type();
			State = 100;
			Match(ID);
			State = 101;
			Match(LEFT_PAREN);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 266287972352L) != 0)) {
				{
				State = 102;
				listargs();
				}
			}

			State = 105;
			Match(RIGHT_PAREN);
			State = 106;
			Match(LEFT_BRACE);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173443406373312L) != 0)) {
				{
				{
				State = 107;
				statement();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RETURN() { return GetToken(LatticeParser.OP_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignvalContext assignval() {
			return GetRuleContext<AssignvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(OP_RETURN);
			State = 116;
			assignval();
			State = 117;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaillistargContext taillistarg() {
			return GetRuleContext<TaillistargContext>(0);
		}
		public ListargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterListargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitListargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListargsContext listargs() {
		ListargsContext _localctx = new ListargsContext(Context, State);
		EnterRule(_localctx, 8, RULE_listargs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			arg();
			State = 120;
			taillistarg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			type();
			State = 123;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaillistargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LatticeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LatticeParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public TaillistargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taillistarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTaillistarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTaillistarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaillistarg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaillistargContext taillistarg() {
		TaillistargContext _localctx = new TaillistargContext(Context, State);
		EnterRule(_localctx, 12, RULE_taillistarg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 125;
				Match(COMMA);
				State = 126;
				arg();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PRINT() { return GetToken(LatticeParser.OP_PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_printstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(OP_PRINT);
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 134;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardecltailContext vardecltail() {
			return GetRuleContext<VardecltailContext>(0);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_vardecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			type();
			State = 137;
			Match(ID);
			State = 138;
			vardecltail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecltailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
			return GetRuleContext<TailvarassignorgraphmanipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public VardecltailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecltail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVardecltail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVardecltail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecltail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecltailContext vardecltail() {
		VardecltailContext _localctx = new VardecltailContext(Context, State);
		EnterRule(_localctx, 18, RULE_vardecltail);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
			case OP_ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				tailvarassignorgraphmanip();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(LatticeParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(LatticeParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(LatticeParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(LatticeParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_GRAPH() { return GetToken(LatticeParser.TYPE_GRAPH, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 266287972352L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarassignorgraphmaniporaddrelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
			return GetRuleContext<TailvarassignorgraphmanipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TailaddrelContext tailaddrel() {
			return GetRuleContext<TailaddrelContext>(0);
		}
		public VarassignorgraphmaniporaddrelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varassignorgraphmaniporaddrel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterVarassignorgraphmaniporaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitVarassignorgraphmaniporaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarassignorgraphmaniporaddrel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarassignorgraphmaniporaddrelContext varassignorgraphmaniporaddrel() {
		VarassignorgraphmaniporaddrelContext _localctx = new VarassignorgraphmaniporaddrelContext(Context, State);
		EnterRule(_localctx, 22, RULE_varassignorgraphmaniporaddrel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(ID);
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
			case OP_ASSIGN:
				{
				State = 147;
				tailvarassignorgraphmanip();
				}
				break;
			case OP_REL_LEFT:
				{
				State = 148;
				tailaddrel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailvarassignorgraphmanipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TailvarassignContext tailvarassign() {
			return GetRuleContext<TailvarassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TailgraphmanipContext tailgraphmanip() {
			return GetRuleContext<TailgraphmanipContext>(0);
		}
		public TailvarassignorgraphmanipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailvarassignorgraphmanip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailvarassignorgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailvarassignorgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailvarassignorgraphmanip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailvarassignorgraphmanipContext tailvarassignorgraphmanip() {
		TailvarassignorgraphmanipContext _localctx = new TailvarassignorgraphmanipContext(Context, State);
		EnterRule(_localctx, 24, RULE_tailvarassignorgraphmanip);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				tailvarassign();
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				tailgraphmanip();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailvarassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(LatticeParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignvalContext assignval() {
			return GetRuleContext<AssignvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public TailvarassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailvarassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailvarassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailvarassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailvarassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailvarassignContext tailvarassign() {
		TailvarassignContext _localctx = new TailvarassignContext(Context, State);
		EnterRule(_localctx, 26, RULE_tailvarassign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(OP_ASSIGN);
			State = 156;
			assignval();
			State = 157;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutmostexprContext outmostexpr() {
			return GetRuleContext<OutmostexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		public AssignvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAssignval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAssignval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignvalContext assignval() {
		AssignvalContext _localctx = new AssignvalContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignval);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				outmostexpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				outmostboolexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRUE() { return GetToken(LatticeParser.KEYWORD_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FALSE() { return GetToken(LatticeParser.KEYWORD_FALSE, 0); }
		public BoolvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBoolval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBoolval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolvalContext boolval() {
		BoolvalContext _localctx = new BoolvalContext(Context, State);
		EnterRule(_localctx, 30, RULE_boolval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_TRUE || _la==KEYWORD_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailgraphmanipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TailgraphmanipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailgraphmanip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailgraphmanip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailgraphmanip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailgraphmanipContext tailgraphmanip() {
		TailgraphmanipContext _localctx = new TailgraphmanipContext(Context, State);
		EnterRule(_localctx, 32, RULE_tailgraphmanip);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(LEFT_BRACE);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173443406373312L) != 0)) {
				{
				{
				State = 166;
				statement();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REF() { return GetToken(LatticeParser.OP_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public AddrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddrefContext addref() {
		AddrefContext _localctx = new AddrefContext(Context, State);
		EnterRule(_localctx, 34, RULE_addref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(OP_REF);
			State = 175;
			Match(ID);
			State = 176;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddcloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CLONE() { return GetToken(LatticeParser.OP_CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LatticeParser.SEMICOLON, 0); }
		public AddcloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addclone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddclone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddclone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddclone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddcloneContext addclone() {
		AddcloneContext _localctx = new AddcloneContext(Context, State);
		EnterRule(_localctx, 36, RULE_addclone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(OP_CLONE);
			State = 179;
			Match(ID);
			State = 180;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TailaddrelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REL_LEFT() { return GetToken(LatticeParser.OP_REL_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LatticeParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REL_RIGHT() { return GetToken(LatticeParser.OP_REL_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public TailaddrelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tailaddrel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTailaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTailaddrel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTailaddrel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TailaddrelContext tailaddrel() {
		TailaddrelContext _localctx = new TailaddrelContext(Context, State);
		EnterRule(_localctx, 38, RULE_tailaddrel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(OP_REL_LEFT);
			State = 183;
			number();
			State = 184;
			Match(COMMA);
			State = 185;
			Match(STRING);
			State = 186;
			Match(OP_REL_RIGHT);
			State = 187;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutmostexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutmostexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outmostexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterOutmostexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitOutmostexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutmostexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutmostexprContext outmostexpr() {
		OutmostexprContext _localctx = new OutmostexprContext(Context, State);
		EnterRule(_localctx, 40, RULE_outmostexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UMINUSContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(LatticeParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UMINUSContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterUMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitUMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDCASEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public IDCASEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIDCASE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIDCASE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDCASE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGEXPRContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LatticeParser.STRING, 0); }
		public STRINGEXPRContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterSTRINGEXPR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitSTRINGEXPR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRINGEXPR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FUNCTIONCALLContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public FUNCTIONCALLContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFUNCTIONCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFUNCTIONCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFUNCTIONCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARENGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public PARENGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPARENGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPARENGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARENGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DOUBLEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DOUBLEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterDOUBLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitDOUBLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDOUBLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULOPGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop() {
			return GetRuleContext<MulopContext>(0);
		}
		public MULOPGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterMULOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitMULOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULOPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FUNCTIONMAPPINGContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FMAP() { return GetToken(LatticeParser.KEYWORD_FMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LatticeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LatticeParser.ID, i);
		}
		public FUNCTIONMAPPINGContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFUNCTIONMAPPING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFUNCTIONMAPPING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFUNCTIONMAPPING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDOPGRPContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop() {
			return GetRuleContext<AddopContext>(0);
		}
		public ADDOPGRPContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterADDOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitADDOPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADDOPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new UMINUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 192;
				Match(OP_SUB);
				State = 193;
				expr(9);
				}
				break;
			case 2:
				{
				_localctx = new PARENGRPContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 194;
				Match(LEFT_PAREN);
				State = 195;
				expr(0);
				State = 196;
				Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new DOUBLEContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				number();
				}
				break;
			case 4:
				{
				_localctx = new IDCASEContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 199;
				Match(ID);
				}
				break;
			case 5:
				{
				_localctx = new FUNCTIONCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				funccall();
				}
				break;
			case 6:
				{
				_localctx = new FUNCTIONMAPPINGContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				Match(KEYWORD_FMAP);
				State = 202;
				Match(ID);
				State = 203;
				Match(ID);
				}
				break;
			case 7:
				{
				_localctx = new STRINGEXPRContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new MULOPGRPContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 207;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 208;
						mulop();
						State = 209;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ADDOPGRPContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 211;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 212;
						addop();
						State = 213;
						expr(8);
						}
						break;
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LatticeParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(LatticeParser.FLOAT_LIT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 44, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LIT || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(LatticeParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(LatticeParser.OP_SUB, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 46, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_ADD || _la==OP_SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT() { return GetToken(LatticeParser.OP_MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(LatticeParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REM() { return GetToken(LatticeParser.OP_REM, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 48, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfheaderContext ifheader() {
			return GetRuleContext<IfheaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseblockContext elseblock() {
			return GetRuleContext<ElseblockContext>(0);
		}
		public IfblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIfblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIfblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfblockContext ifblock() {
		IfblockContext _localctx = new IfblockContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ifheader();
			State = 227;
			Match(LEFT_BRACE);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173443406373312L) != 0)) {
				{
				{
				State = 228;
				statement();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(RIGHT_BRACE);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 235;
				elseblock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(LatticeParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public IfheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIfheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIfheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfheaderContext ifheader() {
		IfheaderContext _localctx = new IfheaderContext(Context, State);
		EnterRule(_localctx, 52, RULE_ifheader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(KEYWORD_IF);
			State = 239;
			Match(LEFT_PAREN);
			State = 240;
			outmostboolexpr();
			State = 241;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(LatticeParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterElseblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitElseblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseblockContext elseblock() {
		ElseblockContext _localctx = new ElseblockContext(Context, State);
		EnterRule(_localctx, 54, RULE_elseblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(KEYWORD_ELSE);
			State = 244;
			Match(LEFT_BRACE);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173443406373312L) != 0)) {
				{
				{
				State = 245;
				statement();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutmostboolexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public OutmostboolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outmostboolexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterOutmostboolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitOutmostboolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutmostboolexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutmostboolexprContext outmostboolexpr() {
		OutmostboolexprContext _localctx = new OutmostboolexprContext(Context, State);
		EnterRule(_localctx, 56, RULE_outmostboolexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			boolexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexprContext : ParserRuleContext {
		public BoolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpr; } }
	 
		public BoolexprContext() { }
		public virtual void CopyFrom(BoolexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BOOLVALContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BOOLVALContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLVAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLVAL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLVAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOOLEXPRCOMPGRPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext[] boolexpr() {
			return GetRuleContexts<BoolexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr(int i) {
			return GetRuleContext<BoolexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompopContext compop() {
			return GetRuleContext<CompopContext>(0);
		}
		public BOOLEXPRCOMPGRPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLEXPRCOMPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOTContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_NOT() { return GetToken(LatticeParser.OP_B_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public NOTContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterNOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitNOT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PARENGRPBOOLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public PARENGRPBOOLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterPARENGRPBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitPARENGRPBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARENGRPBOOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOOLOPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext[] boolexpr() {
			return GetRuleContexts<BoolexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr(int i) {
			return GetRuleContext<BoolexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolopContext boolop() {
			return GetRuleContext<BoolopContext>(0);
		}
		public BOOLOPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBOOLOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBOOLOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLOP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EXPRCOMPGRPContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompopContext compop() {
			return GetRuleContext<CompopContext>(0);
		}
		public EXPRCOMPGRPContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitEXPRCOMPGRP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEXPRCOMPGRP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDBOOLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public IDBOOLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterIDBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitIDBOOL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDBOOL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FUNCCALLContext : BoolexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public FUNCCALLContext(BoolexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFUNCCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFUNCCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFUNCCALL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexprContext boolexpr() {
		return boolexpr(0);
	}

	private BoolexprContext boolexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolexprContext _localctx = new BoolexprContext(Context, _parentState);
		BoolexprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_boolexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new NOTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 256;
				Match(OP_B_NOT);
				State = 257;
				boolexpr(8);
				}
				break;
			case 2:
				{
				_localctx = new EXPRCOMPGRPContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258;
				expr(0);
				State = 259;
				compop();
				State = 260;
				expr(0);
				}
				break;
			case 3:
				{
				_localctx = new PARENGRPBOOLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 262;
				Match(LEFT_PAREN);
				State = 263;
				boolexpr(0);
				State = 264;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new IDBOOLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(ID);
				}
				break;
			case 5:
				{
				_localctx = new FUNCCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267;
				funccall();
				}
				break;
			case 6:
				{
				_localctx = new BOOLVALContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268;
				boolval();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 279;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new BOOLOPContext(new BoolexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
						State = 271;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 272;
						boolop();
						State = 273;
						boolexpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BOOLEXPRCOMPGRPContext(new BoolexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
						State = 275;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 276;
						compop();
						State = 277;
						boolexpr(7);
						}
						break;
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_AND() { return GetToken(LatticeParser.OP_B_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_OR() { return GetToken(LatticeParser.OP_B_OR, 0); }
		public BoolopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterBoolop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitBoolop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolopContext boolop() {
		BoolopContext _localctx = new BoolopContext(Context, State);
		EnterRule(_localctx, 60, RULE_boolop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_B_OR || _la==OP_B_AND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_EQ() { return GetToken(LatticeParser.OP_B_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_B_NEQ() { return GetToken(LatticeParser.OP_B_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GRT() { return GetToken(LatticeParser.OP_GRT, 0); }
		public CompopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterCompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitCompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompopContext compop() {
		CompopContext _localctx = new CompopContext(Context, State);
		EnterRule(_localctx, 62, RULE_compop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 134610944L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListparamsContext listparams() {
			return GetRuleContext<ListparamsContext>(0);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 64, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(ID);
			State = 289;
			Match(LEFT_PAREN);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 290;
				listparams();
				}
			}

			State = 293;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileblockheaderContext whileblockheader() {
			return GetRuleContext<WhileblockheaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(LatticeParser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(LatticeParser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterWhileblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitWhileblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileblockContext whileblock() {
		WhileblockContext _localctx = new WhileblockContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			whileblockheader();
			State = 296;
			Match(LEFT_BRACE);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 173443406373312L) != 0)) {
				{
				{
				State = 297;
				statement();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileblockheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(LatticeParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(LatticeParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutmostboolexprContext outmostboolexpr() {
			return GetRuleContext<OutmostboolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(LatticeParser.RIGHT_PAREN, 0); }
		public WhileblockheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileblockheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterWhileblockheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitWhileblockheader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileblockheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileblockheaderContext whileblockheader() {
		WhileblockheaderContext _localctx = new WhileblockheaderContext(Context, State);
		EnterRule(_localctx, 68, RULE_whileblockheader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(KEYWORD_WHILE);
			State = 306;
			Match(LEFT_PAREN);
			State = 307;
			outmostboolexpr();
			State = 308;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListparamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TaillistparamsContext taillistparams() {
			return GetRuleContext<TaillistparamsContext>(0);
		}
		public ListparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listparams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterListparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitListparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListparamsContext listparams() {
		ListparamsContext _localctx = new ListparamsContext(Context, State);
		EnterRule(_localctx, 70, RULE_listparams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			param();
			State = 311;
			taillistparams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LatticeParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 72, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TaillistparamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LatticeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LatticeParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public TaillistparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_taillistparams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.EnterTaillistparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILatticeListener typedListener = listener as ILatticeListener;
			if (typedListener != null) typedListener.ExitTaillistparams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILatticeVisitor<TResult> typedVisitor = visitor as ILatticeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTaillistparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaillistparamsContext taillistparams() {
		TaillistparamsContext _localctx = new TaillistparamsContext(Context, State);
		EnterRule(_localctx, 74, RULE_taillistparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 315;
				Match(COMMA);
				State = 316;
				param();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		case 29: return boolexpr_sempred((BoolexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		}
		return true;
	}
	private bool boolexpr_sempred(BoolexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,323,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,5,0,79,8,0,10,0,12,0,82,9,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,97,8,1,1,2,1,2,1,2,1,2,1,2,3,
		2,104,8,2,1,2,1,2,1,2,5,2,109,8,2,10,2,12,2,112,9,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,6,128,8,6,10,6,12,6,131,9,6,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,3,9,143,8,9,1,10,1,10,1,11,1,11,
		1,11,3,11,150,8,11,1,12,1,12,3,12,154,8,12,1,13,1,13,1,13,1,13,1,14,1,
		14,3,14,162,8,14,1,15,1,15,1,16,1,16,5,16,168,8,16,10,16,12,16,171,9,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,206,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,5,21,216,8,21,10,21,12,21,219,9,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,25,1,25,1,25,5,25,230,8,25,10,25,12,25,233,9,25,1,25,1,25,3,25,237,
		8,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,247,8,27,10,27,12,27,
		250,9,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,3,29,270,8,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,5,29,280,8,29,10,29,12,29,283,9,29,1,30,1,30,1,31,1,31,1,32,
		1,32,1,32,3,32,292,8,32,1,32,1,32,1,33,1,33,1,33,5,33,299,8,33,10,33,12,
		33,302,9,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
		1,37,1,37,5,37,318,8,37,10,37,12,37,321,9,37,1,37,0,2,42,58,38,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,0,8,2,0,6,6,47,47,1,0,33,37,1,0,43,44,1,
		0,7,8,1,0,22,23,1,0,24,26,1,0,19,20,2,0,17,18,27,27,325,0,80,1,0,0,0,2,
		96,1,0,0,0,4,98,1,0,0,0,6,115,1,0,0,0,8,119,1,0,0,0,10,122,1,0,0,0,12,
		129,1,0,0,0,14,132,1,0,0,0,16,136,1,0,0,0,18,142,1,0,0,0,20,144,1,0,0,
		0,22,146,1,0,0,0,24,153,1,0,0,0,26,155,1,0,0,0,28,161,1,0,0,0,30,163,1,
		0,0,0,32,165,1,0,0,0,34,174,1,0,0,0,36,178,1,0,0,0,38,182,1,0,0,0,40,189,
		1,0,0,0,42,205,1,0,0,0,44,220,1,0,0,0,46,222,1,0,0,0,48,224,1,0,0,0,50,
		226,1,0,0,0,52,238,1,0,0,0,54,243,1,0,0,0,56,253,1,0,0,0,58,269,1,0,0,
		0,60,284,1,0,0,0,62,286,1,0,0,0,64,288,1,0,0,0,66,295,1,0,0,0,68,305,1,
		0,0,0,70,310,1,0,0,0,72,313,1,0,0,0,74,319,1,0,0,0,76,79,3,2,1,0,77,79,
		3,4,2,0,78,76,1,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,
		1,0,0,0,81,1,1,0,0,0,82,80,1,0,0,0,83,97,3,16,8,0,84,97,3,22,11,0,85,97,
		3,14,7,0,86,97,3,50,25,0,87,97,3,66,33,0,88,89,3,64,32,0,89,90,5,10,0,
		0,90,97,1,0,0,0,91,97,3,6,3,0,92,97,3,36,18,0,93,97,3,34,17,0,94,97,3,
		40,20,0,95,97,3,58,29,0,96,83,1,0,0,0,96,84,1,0,0,0,96,85,1,0,0,0,96,86,
		1,0,0,0,96,87,1,0,0,0,96,88,1,0,0,0,96,91,1,0,0,0,96,92,1,0,0,0,96,93,
		1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,3,1,0,0,0,98,99,5,32,0,0,99,100,
		3,20,10,0,100,101,5,47,0,0,101,103,5,13,0,0,102,104,3,8,4,0,103,102,1,
		0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,106,5,14,0,0,106,110,5,11,0,
		0,107,109,3,2,1,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,
		111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,114,5,12,0,0,114,5,1,0,
		0,0,115,116,5,30,0,0,116,117,3,28,14,0,117,118,5,10,0,0,118,7,1,0,0,0,
		119,120,3,10,5,0,120,121,3,12,6,0,121,9,1,0,0,0,122,123,3,20,10,0,123,
		124,5,47,0,0,124,11,1,0,0,0,125,126,5,15,0,0,126,128,3,10,5,0,127,125,
		1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,13,1,0,0,0,
		131,129,1,0,0,0,132,133,5,31,0,0,133,134,7,0,0,0,134,135,5,10,0,0,135,
		15,1,0,0,0,136,137,3,20,10,0,137,138,5,47,0,0,138,139,3,18,9,0,139,17,
		1,0,0,0,140,143,3,24,12,0,141,143,5,10,0,0,142,140,1,0,0,0,142,141,1,0,
		0,0,143,19,1,0,0,0,144,145,7,1,0,0,145,21,1,0,0,0,146,149,5,47,0,0,147,
		150,3,24,12,0,148,150,3,38,19,0,149,147,1,0,0,0,149,148,1,0,0,0,150,23,
		1,0,0,0,151,154,3,26,13,0,152,154,3,32,16,0,153,151,1,0,0,0,153,152,1,
		0,0,0,154,25,1,0,0,0,155,156,5,16,0,0,156,157,3,28,14,0,157,158,5,10,0,
		0,158,27,1,0,0,0,159,162,3,40,20,0,160,162,3,56,28,0,161,159,1,0,0,0,161,
		160,1,0,0,0,162,29,1,0,0,0,163,164,7,2,0,0,164,31,1,0,0,0,165,169,5,11,
		0,0,166,168,3,2,1,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,
		170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,12,0,0,173,33,1,
		0,0,0,174,175,5,28,0,0,175,176,5,47,0,0,176,177,5,10,0,0,177,35,1,0,0,
		0,178,179,5,29,0,0,179,180,5,47,0,0,180,181,5,10,0,0,181,37,1,0,0,0,182,
		183,5,45,0,0,183,184,3,44,22,0,184,185,5,15,0,0,185,186,5,6,0,0,186,187,
		5,46,0,0,187,188,5,47,0,0,188,39,1,0,0,0,189,190,3,42,21,0,190,41,1,0,
		0,0,191,192,6,21,-1,0,192,193,5,23,0,0,193,206,3,42,21,9,194,195,5,13,
		0,0,195,196,3,42,21,0,196,197,5,14,0,0,197,206,1,0,0,0,198,206,3,44,22,
		0,199,206,5,47,0,0,200,206,3,64,32,0,201,202,5,39,0,0,202,203,5,47,0,0,
		203,206,5,47,0,0,204,206,5,6,0,0,205,191,1,0,0,0,205,194,1,0,0,0,205,198,
		1,0,0,0,205,199,1,0,0,0,205,200,1,0,0,0,205,201,1,0,0,0,205,204,1,0,0,
		0,206,217,1,0,0,0,207,208,10,8,0,0,208,209,3,48,24,0,209,210,3,42,21,9,
		210,216,1,0,0,0,211,212,10,7,0,0,212,213,3,46,23,0,213,214,3,42,21,8,214,
		216,1,0,0,0,215,207,1,0,0,0,215,211,1,0,0,0,216,219,1,0,0,0,217,215,1,
		0,0,0,217,218,1,0,0,0,218,43,1,0,0,0,219,217,1,0,0,0,220,221,7,3,0,0,221,
		45,1,0,0,0,222,223,7,4,0,0,223,47,1,0,0,0,224,225,7,5,0,0,225,49,1,0,0,
		0,226,227,3,52,26,0,227,231,5,11,0,0,228,230,3,2,1,0,229,228,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,
		0,0,0,234,236,5,12,0,0,235,237,3,54,27,0,236,235,1,0,0,0,236,237,1,0,0,
		0,237,51,1,0,0,0,238,239,5,40,0,0,239,240,5,13,0,0,240,241,3,56,28,0,241,
		242,5,14,0,0,242,53,1,0,0,0,243,244,5,41,0,0,244,248,5,11,0,0,245,247,
		3,2,1,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,
		0,249,251,1,0,0,0,250,248,1,0,0,0,251,252,5,12,0,0,252,55,1,0,0,0,253,
		254,3,58,29,0,254,57,1,0,0,0,255,256,6,29,-1,0,256,257,5,21,0,0,257,270,
		3,58,29,8,258,259,3,42,21,0,259,260,3,62,31,0,260,261,3,42,21,0,261,270,
		1,0,0,0,262,263,5,13,0,0,263,264,3,58,29,0,264,265,5,14,0,0,265,270,1,
		0,0,0,266,270,5,47,0,0,267,270,3,64,32,0,268,270,3,30,15,0,269,255,1,0,
		0,0,269,258,1,0,0,0,269,262,1,0,0,0,269,266,1,0,0,0,269,267,1,0,0,0,269,
		268,1,0,0,0,270,281,1,0,0,0,271,272,10,7,0,0,272,273,3,60,30,0,273,274,
		3,58,29,8,274,280,1,0,0,0,275,276,10,6,0,0,276,277,3,62,31,0,277,278,3,
		58,29,7,278,280,1,0,0,0,279,271,1,0,0,0,279,275,1,0,0,0,280,283,1,0,0,
		0,281,279,1,0,0,0,281,282,1,0,0,0,282,59,1,0,0,0,283,281,1,0,0,0,284,285,
		7,6,0,0,285,61,1,0,0,0,286,287,7,7,0,0,287,63,1,0,0,0,288,289,5,47,0,0,
		289,291,5,13,0,0,290,292,3,70,35,0,291,290,1,0,0,0,291,292,1,0,0,0,292,
		293,1,0,0,0,293,294,5,14,0,0,294,65,1,0,0,0,295,296,3,68,34,0,296,300,
		5,11,0,0,297,299,3,2,1,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,
		0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,12,0,0,304,
		67,1,0,0,0,305,306,5,42,0,0,306,307,5,13,0,0,307,308,3,56,28,0,308,309,
		5,14,0,0,309,69,1,0,0,0,310,311,3,72,36,0,311,312,3,74,37,0,312,71,1,0,
		0,0,313,314,5,47,0,0,314,73,1,0,0,0,315,316,5,15,0,0,316,318,3,72,36,0,
		317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,75,
		1,0,0,0,321,319,1,0,0,0,23,78,80,96,103,110,129,142,149,153,161,169,205,
		215,217,231,236,248,269,279,281,291,300,319
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
