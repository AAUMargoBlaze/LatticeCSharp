//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mii/RiderProjects/Lattice/Lattice/Lattice.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LatticeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, SINGLELINE_COMMENT=2, MULTILINE_COMMENT=3, STRING=4, FLOAT_LIT=5, 
		INTEGER=6, NATURAL_NUMBER=7, SEMICOLON=8, LEFT_BRACE=9, RIGHT_BRACE=10, 
		LEFT_PAREN=11, RIGHT_PAREN=12, COMMA=13, OP_ASSIGN=14, OP_B_EQ=15, OP_B_NEQ=16, 
		OP_B_OR=17, OP_B_AND=18, OP_B_NOT=19, OP_ADD=20, OP_SUB=21, OP_MULT=22, 
		OP_DIV=23, OP_REM=24, OP_GRT=25, OP_REF=26, OP_CLONE=27, OP_PRINT=28, 
		TYPE_INT=29, TYPE_FLOAT=30, TYPE_STRING=31, TYPE_BOOL=32, TYPE_GRAPH=33, 
		TYPE_RELATIONSHIP=34, KEYWORD_TRUE=35, KEYWORD_FALSE=36, OP_REL_LEFT=37, 
		OP_REL_RIGHT=38, ID=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "CHARACTER", "WS", "LETTER", "DIGIT", "NZ_DIGIT", "ALPHANUM", 
		"HEX_LIT", "DQ_STRING", "SQ_STRING", "WHITESPACE", "SINGLELINE_COMMENT", 
		"MULTILINE_COMMENT", "STRING", "FLOAT_LIT", "INTEGER", "NATURAL_NUMBER", 
		"SEMICOLON", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
		"COMMA", "OP_ASSIGN", "OP_B_EQ", "OP_B_NEQ", "OP_B_OR", "OP_B_AND", "OP_B_NOT", 
		"OP_ADD", "OP_SUB", "OP_MULT", "OP_DIV", "OP_REM", "OP_GRT", "OP_REF", 
		"OP_CLONE", "OP_PRINT", "TYPE_INT", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BOOL", 
		"TYPE_GRAPH", "TYPE_RELATIONSHIP", "KEYWORD_TRUE", "KEYWORD_FALSE", "OP_REL_LEFT", 
		"OP_REL_RIGHT", "ID"
	};


	public LatticeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LatticeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "';'", "'{'", "'}'", "'('", 
		"')'", "','", "'='", "'=='", "'!='", "'||'", "'&&'", "'!'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'<'", "'ref'", "'clone'", "'print'", "'int'", "'float'", 
		"'str'", "'bool'", "'graph'", "'rel'", "'true'", "'false'", "'|-'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "SINGLELINE_COMMENT", "MULTILINE_COMMENT", "STRING", 
		"FLOAT_LIT", "INTEGER", "NATURAL_NUMBER", "SEMICOLON", "LEFT_BRACE", "RIGHT_BRACE", 
		"LEFT_PAREN", "RIGHT_PAREN", "COMMA", "OP_ASSIGN", "OP_B_EQ", "OP_B_NEQ", 
		"OP_B_OR", "OP_B_AND", "OP_B_NOT", "OP_ADD", "OP_SUB", "OP_MULT", "OP_DIV", 
		"OP_REM", "OP_GRT", "OP_REF", "OP_CLONE", "OP_PRINT", "TYPE_INT", "TYPE_FLOAT", 
		"TYPE_STRING", "TYPE_BOOL", "TYPE_GRAPH", "TYPE_RELATIONSHIP", "KEYWORD_TRUE", 
		"KEYWORD_FALSE", "OP_REL_LEFT", "OP_REL_RIGHT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lattice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LatticeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,39,310,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,
		0,1,0,3,0,103,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
		1,7,1,8,1,8,1,8,5,8,122,8,8,10,8,12,8,125,9,8,1,8,1,8,1,9,1,9,1,9,5,9,
		132,8,9,10,9,12,9,135,9,9,1,9,1,9,1,10,1,10,4,10,141,8,10,11,10,12,10,
		142,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,152,8,11,10,11,12,11,155,9,
		11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,165,8,12,10,12,12,12,168,
		9,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,3,13,177,8,13,1,14,3,14,180,8,
		14,1,14,1,14,1,14,4,14,185,8,14,11,14,12,14,186,1,15,3,15,190,8,15,1,15,
		1,15,1,16,1,16,1,16,5,16,197,8,16,10,16,12,16,200,9,16,3,16,202,8,16,1,
		17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
		24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
		29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,
		38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
		41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
		43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,
		46,1,47,1,47,1,47,1,48,4,48,307,8,48,11,48,12,48,308,3,123,133,166,0,49,
		1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,1,23,2,25,3,27,4,29,5,
		31,6,33,7,35,8,37,9,39,10,41,11,43,12,45,13,47,14,49,15,51,16,53,17,55,
		18,57,19,59,20,61,21,63,22,65,23,67,24,69,25,71,26,73,27,75,28,77,29,79,
		30,81,31,83,32,85,33,87,34,89,35,91,36,93,37,95,38,97,39,1,0,7,3,0,9,10,
		13,13,32,32,2,0,9,9,32,32,2,0,65,90,97,122,1,0,48,57,1,0,49,57,3,0,48,
		57,65,90,97,122,3,0,48,57,65,70,97,102,316,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,102,1,0,0,0,3,
		104,1,0,0,0,5,106,1,0,0,0,7,108,1,0,0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,
		114,1,0,0,0,15,116,1,0,0,0,17,118,1,0,0,0,19,128,1,0,0,0,21,140,1,0,0,
		0,23,146,1,0,0,0,25,160,1,0,0,0,27,176,1,0,0,0,29,179,1,0,0,0,31,189,1,
		0,0,0,33,201,1,0,0,0,35,203,1,0,0,0,37,205,1,0,0,0,39,207,1,0,0,0,41,209,
		1,0,0,0,43,211,1,0,0,0,45,213,1,0,0,0,47,215,1,0,0,0,49,217,1,0,0,0,51,
		220,1,0,0,0,53,223,1,0,0,0,55,226,1,0,0,0,57,229,1,0,0,0,59,231,1,0,0,
		0,61,233,1,0,0,0,63,235,1,0,0,0,65,237,1,0,0,0,67,239,1,0,0,0,69,241,1,
		0,0,0,71,243,1,0,0,0,73,247,1,0,0,0,75,253,1,0,0,0,77,259,1,0,0,0,79,263,
		1,0,0,0,81,269,1,0,0,0,83,273,1,0,0,0,85,278,1,0,0,0,87,284,1,0,0,0,89,
		288,1,0,0,0,91,293,1,0,0,0,93,299,1,0,0,0,95,302,1,0,0,0,97,306,1,0,0,
		0,99,100,5,13,0,0,100,103,5,10,0,0,101,103,5,10,0,0,102,99,1,0,0,0,102,
		101,1,0,0,0,103,2,1,0,0,0,104,105,8,0,0,0,105,4,1,0,0,0,106,107,7,1,0,
		0,107,6,1,0,0,0,108,109,7,2,0,0,109,8,1,0,0,0,110,111,7,3,0,0,111,10,1,
		0,0,0,112,113,7,4,0,0,113,12,1,0,0,0,114,115,7,5,0,0,115,14,1,0,0,0,116,
		117,7,6,0,0,117,16,1,0,0,0,118,123,5,34,0,0,119,122,3,3,1,0,120,122,3,
		5,2,0,121,119,1,0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,124,1,0,0,0,
		123,121,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,34,0,0,127,18,
		1,0,0,0,128,133,5,39,0,0,129,132,3,3,1,0,130,132,3,5,2,0,131,129,1,0,0,
		0,131,130,1,0,0,0,132,135,1,0,0,0,133,134,1,0,0,0,133,131,1,0,0,0,134,
		136,1,0,0,0,135,133,1,0,0,0,136,137,5,39,0,0,137,20,1,0,0,0,138,141,3,
		5,2,0,139,141,3,1,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,142,1,0,0,0,
		142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,6,10,0,0,145,22,
		1,0,0,0,146,147,5,47,0,0,147,148,5,47,0,0,148,153,1,0,0,0,149,152,3,3,
		1,0,150,152,3,5,2,0,151,149,1,0,0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,
		151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,3,
		1,0,0,157,158,1,0,0,0,158,159,6,11,0,0,159,24,1,0,0,0,160,161,5,47,0,0,
		161,162,5,42,0,0,162,166,1,0,0,0,163,165,9,0,0,0,164,163,1,0,0,0,165,168,
		1,0,0,0,166,167,1,0,0,0,166,164,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,
		0,169,170,5,42,0,0,170,171,5,47,0,0,171,172,1,0,0,0,172,173,6,12,0,0,173,
		26,1,0,0,0,174,177,3,17,8,0,175,177,3,19,9,0,176,174,1,0,0,0,176,175,1,
		0,0,0,177,28,1,0,0,0,178,180,5,45,0,0,179,178,1,0,0,0,179,180,1,0,0,0,
		180,181,1,0,0,0,181,182,3,33,16,0,182,184,5,46,0,0,183,185,3,9,4,0,184,
		183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,30,1,0,
		0,0,188,190,5,45,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,
		192,3,33,16,0,192,32,1,0,0,0,193,202,5,48,0,0,194,198,3,11,5,0,195,197,
		3,9,4,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,
		0,199,202,1,0,0,0,200,198,1,0,0,0,201,193,1,0,0,0,201,194,1,0,0,0,202,
		34,1,0,0,0,203,204,5,59,0,0,204,36,1,0,0,0,205,206,5,123,0,0,206,38,1,
		0,0,0,207,208,5,125,0,0,208,40,1,0,0,0,209,210,5,40,0,0,210,42,1,0,0,0,
		211,212,5,41,0,0,212,44,1,0,0,0,213,214,5,44,0,0,214,46,1,0,0,0,215,216,
		5,61,0,0,216,48,1,0,0,0,217,218,5,61,0,0,218,219,5,61,0,0,219,50,1,0,0,
		0,220,221,5,33,0,0,221,222,5,61,0,0,222,52,1,0,0,0,223,224,5,124,0,0,224,
		225,5,124,0,0,225,54,1,0,0,0,226,227,5,38,0,0,227,228,5,38,0,0,228,56,
		1,0,0,0,229,230,5,33,0,0,230,58,1,0,0,0,231,232,5,43,0,0,232,60,1,0,0,
		0,233,234,5,45,0,0,234,62,1,0,0,0,235,236,5,42,0,0,236,64,1,0,0,0,237,
		238,5,47,0,0,238,66,1,0,0,0,239,240,5,37,0,0,240,68,1,0,0,0,241,242,5,
		60,0,0,242,70,1,0,0,0,243,244,5,114,0,0,244,245,5,101,0,0,245,246,5,102,
		0,0,246,72,1,0,0,0,247,248,5,99,0,0,248,249,5,108,0,0,249,250,5,111,0,
		0,250,251,5,110,0,0,251,252,5,101,0,0,252,74,1,0,0,0,253,254,5,112,0,0,
		254,255,5,114,0,0,255,256,5,105,0,0,256,257,5,110,0,0,257,258,5,116,0,
		0,258,76,1,0,0,0,259,260,5,105,0,0,260,261,5,110,0,0,261,262,5,116,0,0,
		262,78,1,0,0,0,263,264,5,102,0,0,264,265,5,108,0,0,265,266,5,111,0,0,266,
		267,5,97,0,0,267,268,5,116,0,0,268,80,1,0,0,0,269,270,5,115,0,0,270,271,
		5,116,0,0,271,272,5,114,0,0,272,82,1,0,0,0,273,274,5,98,0,0,274,275,5,
		111,0,0,275,276,5,111,0,0,276,277,5,108,0,0,277,84,1,0,0,0,278,279,5,103,
		0,0,279,280,5,114,0,0,280,281,5,97,0,0,281,282,5,112,0,0,282,283,5,104,
		0,0,283,86,1,0,0,0,284,285,5,114,0,0,285,286,5,101,0,0,286,287,5,108,0,
		0,287,88,1,0,0,0,288,289,5,116,0,0,289,290,5,114,0,0,290,291,5,117,0,0,
		291,292,5,101,0,0,292,90,1,0,0,0,293,294,5,102,0,0,294,295,5,97,0,0,295,
		296,5,108,0,0,296,297,5,115,0,0,297,298,5,101,0,0,298,92,1,0,0,0,299,300,
		5,124,0,0,300,301,5,45,0,0,301,94,1,0,0,0,302,303,5,45,0,0,303,304,5,62,
		0,0,304,96,1,0,0,0,305,307,3,7,3,0,306,305,1,0,0,0,307,308,1,0,0,0,308,
		306,1,0,0,0,308,309,1,0,0,0,309,98,1,0,0,0,18,0,102,121,123,131,133,140,
		142,151,153,166,176,179,186,189,198,201,308,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
